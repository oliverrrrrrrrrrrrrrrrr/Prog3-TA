
-- Eliminar los procedimientos almacenados si existen
DROP PROCEDURE IF EXISTS insertarAutor;
DROP PROCEDURE IF EXISTS modificarAutor;
DROP PROCEDURE IF EXISTS eliminarAutor;
DROP PROCEDURE IF EXISTS buscarAutorPorId;
DROP PROCEDURE IF EXISTS listarAutores;

DELIMITER //

CREATE PROCEDURE insertarAutor(
    IN p_nombre VARCHAR(100),
    IN p_apellidos VARCHAR(100),
    IN p_alias VARCHAR(45),
    OUT p_id INT
)
BEGIN
    INSERT INTO AUTOR (
        nombre,
        apellidos,
        alias
    ) VALUES (
        p_nombre,
        p_apellidos,
        p_alias
    );
    
    SET p_id = LAST_INSERT_ID();
END //


CREATE PROCEDURE modificarAutor(
    IN p_id INT,
    IN p_nombre VARCHAR(100),
    IN p_apellidos VARCHAR(100),
    IN p_alias VARCHAR(45)
)
BEGIN
    UPDATE AUTOR
    SET 
        nombre = p_nombre,
        apellidos = p_apellidos,
        alias = p_alias
    WHERE idAutor = p_id;
END //


CREATE PROCEDURE eliminarAutor(IN p_id INT)
BEGIN
    DELETE FROM AUTOR WHERE idAutor = p_id;
END //

CREATE PROCEDURE buscarAutorPorId(IN p_id INT)
BEGIN
    SELECT * FROM AUTOR WHERE idAutor = p_id;
END //

CREATE PROCEDURE listarAutores()
BEGIN
    SELECT * FROM AUTOR;
END //

DELIMITER ;


-- 1. Insertar un nuevo autor
-- Se crea un nuevo autor para la prueba.
SET @new_autor_id = 0;
CALL insertarAutor(
    'J.K.',            -- p_nombre
    'Rowling',         -- p_apellidos
    'Robert Galbraith',-- p_alias
    @new_autor_id
);
SELECT @new_autor_id AS 'Nuevo ID de Autor';

---

-- 2. Listar todos los autores para verificar la inserción
CALL listarAutores();

---

-- 3. Modificar el autor recién insertado
-- Se actualiza el nombre y el alias del autor.
CALL modificarAutor(
    @new_autor_id,     -- ID del autor a modificar
    'Joanne',          -- nuevo nombre
    'Rowling',         -- apellidos (sin cambios)
    'J.K. Rowling'     -- nuevo alias
);

---

-- 4. Buscar el autor modificado por su ID
-- Muestra solo el autor que se acaba de modificar para confirmar los cambios.
CALL buscarAutorPorId(@new_autor_id);

---

-- 5. Eliminar el autor
-- Borra el autor de la base de datos usando su ID.
CALL eliminarAutor(@new_autor_id);

---

-- 6. Listar todos los autores para verificar la eliminación
-- Muestra la lista final, confirmando que el autor eliminado ya no está presente.
CALL listarAutores();